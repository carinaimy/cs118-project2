// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `pox.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __build_pox_hpp__
#define __build_pox_hpp__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace pox
{

class PacketInjector;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketInjector>&);
::IceProxy::Ice::Object* upCast(::IceProxy::pox::PacketInjector*);

class PacketHandler;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketHandler>&);
::IceProxy::Ice::Object* upCast(::IceProxy::pox::PacketHandler*);

class Tester;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::pox::Tester>&);
::IceProxy::Ice::Object* upCast(::IceProxy::pox::Tester*);

}

}

namespace pox
{

class PacketInjector;
bool operator==(const PacketInjector&, const PacketInjector&);
bool operator<(const PacketInjector&, const PacketInjector&);
::Ice::Object* upCast(::pox::PacketInjector*);
typedef ::IceInternal::Handle< ::pox::PacketInjector> PacketInjectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketInjector> PacketInjectorPrx;
void __patch(PacketInjectorPtr&, const ::Ice::ObjectPtr&);

class PacketHandler;
bool operator==(const PacketHandler&, const PacketHandler&);
bool operator<(const PacketHandler&, const PacketHandler&);
::Ice::Object* upCast(::pox::PacketHandler*);
typedef ::IceInternal::Handle< ::pox::PacketHandler> PacketHandlerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketHandler> PacketHandlerPrx;
void __patch(PacketHandlerPtr&, const ::Ice::ObjectPtr&);

class Tester;
bool operator==(const Tester&, const Tester&);
bool operator<(const Tester&, const Tester&);
::Ice::Object* upCast(::pox::Tester*);
typedef ::IceInternal::Handle< ::pox::Tester> TesterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::pox::Tester> TesterPrx;
void __patch(TesterPtr&, const ::Ice::ObjectPtr&);

}

namespace pox
{

typedef ::std::vector< ::Ice::Byte> Buffer;

struct Iface
{
    ::std::string name;
    ::pox::Buffer mac;
    ::Ice::Int port;
};

typedef ::std::vector< ::pox::Iface> Ifaces;

}

namespace Ice
{
template<>
struct StreamableTraits< ::pox::Iface>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::pox::Iface, S>
{
    static void write(S* __os, const ::pox::Iface& v)
    {
        __os->write(v.name);
        __os->write(v.mac);
        __os->write(v.port);
    }
};

template<class S>
struct StreamReader< ::pox::Iface, S>
{
    static void read(S* __is, ::pox::Iface& v)
    {
        __is->read(v.name);
        __is->read(v.mac);
        __is->read(v.port);
    }
};

}

namespace pox
{

class Callback_PacketInjector_sendPacket_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PacketInjector_sendPacket_Base> Callback_PacketInjector_sendPacketPtr;

class Callback_PacketInjector_addPacketHandler_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PacketInjector_addPacketHandler_Base> Callback_PacketInjector_addPacketHandlerPtr;

class Callback_PacketInjector_getIfaces_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PacketInjector_getIfaces_Base> Callback_PacketInjector_getIfacesPtr;

class Callback_PacketHandler_handlePacket_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PacketHandler_handlePacket_Base> Callback_PacketHandler_handlePacketPtr;

class Callback_PacketHandler_resetRouter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PacketHandler_resetRouter_Base> Callback_PacketHandler_resetRouterPtr;

class Callback_Tester_getArp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Tester_getArp_Base> Callback_Tester_getArpPtr;

class Callback_Tester_getRoutingTable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Tester_getRoutingTable_Base> Callback_Tester_getRoutingTablePtr;

class Callback_Tester_getNatTable_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Tester_getNatTable_Base> Callback_Tester_getNatTablePtr;

}

namespace IceProxy
{

namespace pox
{

class PacketInjector : virtual public ::IceProxy::Ice::Object
{
public:

    void sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface)
    {
        sendPacket(packet, outIface, 0);
    }
    void sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx)
    {
        sendPacket(packet, outIface, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendPacket(packet, outIface, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendPacket(packet, outIface, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendPacket(packet, outIface, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendPacket(packet, outIface, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface)
    {
        return begin_sendPacket(packet, outIface, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx)
    {
        return begin_sendPacket(packet, outIface, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendPacket(packet, outIface, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendPacket(packet, outIface, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::pox::Callback_PacketInjector_sendPacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendPacket(packet, outIface, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context& __ctx, const ::pox::Callback_PacketInjector_sendPacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendPacket(packet, outIface, &__ctx, __del, __cookie);
    }

    void end_sendPacket(const ::Ice::AsyncResultPtr&);
    
private:

    void sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addPacketHandler(const ::Ice::Identity& identity)
    {
        addPacketHandler(identity, 0);
    }
    void addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx)
    {
        addPacketHandler(identity, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addPacketHandler(const ::Ice::Identity& identity, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPacketHandler(identity, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addPacketHandler(const ::Ice::Identity& identity, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPacketHandler(identity, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addPacketHandler(identity, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addPacketHandler(identity, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity)
    {
        return begin_addPacketHandler(identity, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx)
    {
        return begin_addPacketHandler(identity, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPacketHandler(identity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPacketHandler(identity, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity, const ::pox::Callback_PacketInjector_addPacketHandlerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPacketHandler(identity, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context& __ctx, const ::pox::Callback_PacketInjector_addPacketHandlerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addPacketHandler(identity, &__ctx, __del, __cookie);
    }

    void end_addPacketHandler(const ::Ice::AsyncResultPtr&);
    
private:

    void addPacketHandler(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addPacketHandler(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::pox::Ifaces getIfaces()
    {
        return getIfaces(0);
    }
    ::pox::Ifaces getIfaces(const ::Ice::Context& __ctx)
    {
        return getIfaces(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getIfaces(const ::IceInternal::Function<void (const ::pox::Ifaces&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getIfaces(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getIfaces(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getIfaces(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getIfaces(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::pox::Ifaces&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getIfaces(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getIfaces(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getIfaces(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getIfaces(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::pox::Ifaces&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::pox::Ifaces&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::pox::PacketInjectorPrx __proxy = ::pox::PacketInjectorPrx::uncheckedCast(__result->getProxy());
                ::pox::Ifaces __ret;
                try
                {
                    __ret = __proxy->end_getIfaces(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::pox::Ifaces&)> _response;
        };
        return begin_getIfaces(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getIfaces()
    {
        return begin_getIfaces(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIfaces(const ::Ice::Context& __ctx)
    {
        return begin_getIfaces(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getIfaces(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIfaces(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIfaces(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIfaces(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIfaces(const ::pox::Callback_PacketInjector_getIfacesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIfaces(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getIfaces(const ::Ice::Context& __ctx, const ::pox::Callback_PacketInjector_getIfacesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getIfaces(&__ctx, __del, __cookie);
    }

    ::pox::Ifaces end_getIfaces(const ::Ice::AsyncResultPtr&);
    
private:

    ::pox::Ifaces getIfaces(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getIfaces(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_secure(bool __secure) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_twoway() const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_oneway() const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_batchOneway() const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_datagram() const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_batchDatagram() const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_compress(bool __compress) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PacketInjector> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PacketInjector*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PacketHandler : virtual public ::IceProxy::Ice::Object
{
public:

    void handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface)
    {
        handlePacket(packet, inIface, 0);
    }
    void handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx)
    {
        handlePacket(packet, inIface, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_handlePacket(packet, inIface, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_handlePacket(packet, inIface, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_handlePacket(packet, inIface, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_handlePacket(packet, inIface, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface)
    {
        return begin_handlePacket(packet, inIface, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx)
    {
        return begin_handlePacket(packet, inIface, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_handlePacket(packet, inIface, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_handlePacket(packet, inIface, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::pox::Callback_PacketHandler_handlePacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_handlePacket(packet, inIface, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context& __ctx, const ::pox::Callback_PacketHandler_handlePacketPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_handlePacket(packet, inIface, &__ctx, __del, __cookie);
    }

    void end_handlePacket(const ::Ice::AsyncResultPtr&);
    
private:

    void handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resetRouter(const ::pox::Ifaces& ports)
    {
        resetRouter(ports, 0);
    }
    void resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx)
    {
        resetRouter(ports, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_resetRouter(const ::pox::Ifaces& ports, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetRouter(ports, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_resetRouter(const ::pox::Ifaces& ports, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetRouter(ports, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_resetRouter(ports, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_resetRouter(ports, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports)
    {
        return begin_resetRouter(ports, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx)
    {
        return begin_resetRouter(ports, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetRouter(ports, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetRouter(ports, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports, const ::pox::Callback_PacketHandler_resetRouterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetRouter(ports, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context& __ctx, const ::pox::Callback_PacketHandler_resetRouterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetRouter(ports, &__ctx, __del, __cookie);
    }

    void end_resetRouter(const ::Ice::AsyncResultPtr&);
    
private:

    void resetRouter(const ::pox::Ifaces&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetRouter(const ::pox::Ifaces&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_secure(bool __secure) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_twoway() const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_oneway() const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_batchOneway() const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_datagram() const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_batchDatagram() const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_compress(bool __compress) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PacketHandler> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PacketHandler*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Tester : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string getArp()
    {
        return getArp(0);
    }
    ::std::string getArp(const ::Ice::Context& __ctx)
    {
        return getArp(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getArp(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArp(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArp(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArp(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getArp(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getArp(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getArp(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getArp(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getArp(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getArp(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getArp(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getArp()
    {
        return begin_getArp(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArp(const ::Ice::Context& __ctx)
    {
        return begin_getArp(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArp(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArp(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArp(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArp(const ::pox::Callback_Tester_getArpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArp(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArp(const ::Ice::Context& __ctx, const ::pox::Callback_Tester_getArpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArp(&__ctx, __del, __cookie);
    }

    ::std::string end_getArp(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getArp(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getArp(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getRoutingTable()
    {
        return getRoutingTable(0);
    }
    ::std::string getRoutingTable(const ::Ice::Context& __ctx)
    {
        return getRoutingTable(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRoutingTable(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRoutingTable(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRoutingTable(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRoutingTable(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRoutingTable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRoutingTable(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRoutingTable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRoutingTable(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRoutingTable(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getRoutingTable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getRoutingTable(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRoutingTable()
    {
        return begin_getRoutingTable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::Ice::Context& __ctx)
    {
        return begin_getRoutingTable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRoutingTable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRoutingTable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::pox::Callback_Tester_getRoutingTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRoutingTable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::Ice::Context& __ctx, const ::pox::Callback_Tester_getRoutingTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRoutingTable(&__ctx, __del, __cookie);
    }

    ::std::string end_getRoutingTable(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getRoutingTable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRoutingTable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getNatTable()
    {
        return getNatTable(0);
    }
    ::std::string getNatTable(const ::Ice::Context& __ctx)
    {
        return getNatTable(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNatTable(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNatTable(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNatTable(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNatTable(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNatTable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNatTable(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNatTable(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNatTable(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNatTable(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getNatTable(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getNatTable(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNatTable()
    {
        return begin_getNatTable(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNatTable(const ::Ice::Context& __ctx)
    {
        return begin_getNatTable(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNatTable(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNatTable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNatTable(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNatTable(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNatTable(const ::pox::Callback_Tester_getNatTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNatTable(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNatTable(const ::Ice::Context& __ctx, const ::pox::Callback_Tester_getNatTablePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNatTable(&__ctx, __del, __cookie);
    }

    ::std::string end_getNatTable(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getNatTable(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNatTable(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Tester> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_secure(bool __secure) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_twoway() const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_oneway() const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_batchOneway() const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_datagram() const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_batchDatagram() const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_compress(bool __compress) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Tester> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Tester*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace pox
{

class PacketInjector : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void addPacketHandler(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::pox::Ifaces getIfaces(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PacketHandler : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void resetRouter(const ::pox::Ifaces&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Tester : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::std::string getArp(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getRoutingTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getNatTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace pox
{

class PacketInjector : virtual public ::IceDelegate::pox::PacketInjector,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPacketHandler(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::pox::Ifaces getIfaces(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PacketHandler : virtual public ::IceDelegate::pox::PacketHandler,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resetRouter(const ::pox::Ifaces&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Tester : virtual public ::IceDelegate::pox::Tester,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::std::string getArp(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getRoutingTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getNatTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace pox
{

class PacketInjector : virtual public ::IceDelegate::pox::PacketInjector,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void addPacketHandler(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::pox::Ifaces getIfaces(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PacketHandler : virtual public ::IceDelegate::pox::PacketHandler,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void resetRouter(const ::pox::Ifaces&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Tester : virtual public ::IceDelegate::pox::Tester,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::std::string getArp(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getRoutingTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getNatTable(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace pox
{

class PacketInjector : virtual public ::Ice::Object
{
public:

    typedef PacketInjectorPrx ProxyType;
    typedef PacketInjectorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendPacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendPacket(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addPacketHandler(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addPacketHandler(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::pox::Ifaces getIfaces(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getIfaces(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PacketInjector& l, const PacketInjector& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PacketInjector& l, const PacketInjector& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PacketHandler : virtual public ::Ice::Object
{
public:

    typedef PacketHandlerPrx ProxyType;
    typedef PacketHandlerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void handlePacket(const ::pox::Buffer&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___handlePacket(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetRouter(const ::pox::Ifaces&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetRouter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PacketHandler& l, const PacketHandler& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PacketHandler& l, const PacketHandler& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Tester : virtual public ::Ice::Object
{
public:

    typedef TesterPrx ProxyType;
    typedef TesterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string getArp(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getArp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getRoutingTable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRoutingTable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getNatTable(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getNatTable(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Tester& l, const Tester& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Tester& l, const Tester& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace pox
{

template<class T>
class CallbackNC_PacketInjector_sendPacket : public Callback_PacketInjector_sendPacket_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PacketInjector_sendPacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_sendPacket<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_sendPacket<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_sendPacket<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_sendPacket<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PacketInjector_sendPacket : public Callback_PacketInjector_sendPacket_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PacketInjector_sendPacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_sendPacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_sendPacket<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_sendPacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_sendPacketPtr
newCallback_PacketInjector_sendPacket(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_sendPacket<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PacketInjector_addPacketHandler : public Callback_PacketInjector_addPacketHandler_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PacketInjector_addPacketHandler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_addPacketHandler<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_addPacketHandler<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_addPacketHandler<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_addPacketHandler<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PacketInjector_addPacketHandler : public Callback_PacketInjector_addPacketHandler_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PacketInjector_addPacketHandler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_addPacketHandler<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_addPacketHandler<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_addPacketHandler<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_addPacketHandlerPtr
newCallback_PacketInjector_addPacketHandler(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_addPacketHandler<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PacketInjector_getIfaces : public Callback_PacketInjector_getIfaces_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::pox::Ifaces&);

    CallbackNC_PacketInjector_getIfaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::PacketInjectorPrx __proxy = ::pox::PacketInjectorPrx::uncheckedCast(__result->getProxy());
        ::pox::Ifaces __ret;
        try
        {
            __ret = __proxy->end_getIfaces(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_PacketInjector_getIfacesPtr
newCallback_PacketInjector_getIfaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::pox::Ifaces&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_getIfaces<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketInjector_getIfacesPtr
newCallback_PacketInjector_getIfaces(T* instance, void (T::*cb)(const ::pox::Ifaces&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketInjector_getIfaces<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_PacketInjector_getIfaces : public Callback_PacketInjector_getIfaces_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::pox::Ifaces&, const CT&);

    Callback_PacketInjector_getIfaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::PacketInjectorPrx __proxy = ::pox::PacketInjectorPrx::uncheckedCast(__result->getProxy());
        ::pox::Ifaces __ret;
        try
        {
            __ret = __proxy->end_getIfaces(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_PacketInjector_getIfacesPtr
newCallback_PacketInjector_getIfaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::pox::Ifaces&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_getIfaces<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketInjector_getIfacesPtr
newCallback_PacketInjector_getIfaces(T* instance, void (T::*cb)(const ::pox::Ifaces&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketInjector_getIfaces<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_PacketHandler_handlePacket : public Callback_PacketHandler_handlePacket_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PacketHandler_handlePacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_handlePacket<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_handlePacket<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_handlePacket<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_handlePacket<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PacketHandler_handlePacket : public Callback_PacketHandler_handlePacket_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PacketHandler_handlePacket(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_handlePacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_handlePacket<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_handlePacket<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_handlePacketPtr
newCallback_PacketHandler_handlePacket(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_handlePacket<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PacketHandler_resetRouter : public Callback_PacketHandler_resetRouter_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PacketHandler_resetRouter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_resetRouter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_resetRouter<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_resetRouter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PacketHandler_resetRouter<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PacketHandler_resetRouter : public Callback_PacketHandler_resetRouter_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PacketHandler_resetRouter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_resetRouter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_resetRouter<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_resetRouter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PacketHandler_resetRouterPtr
newCallback_PacketHandler_resetRouter(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PacketHandler_resetRouter<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Tester_getArp : public Callback_Tester_getArp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Tester_getArp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getArp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Tester_getArpPtr
newCallback_Tester_getArp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getArp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Tester_getArpPtr
newCallback_Tester_getArp(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getArp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Tester_getArp : public Callback_Tester_getArp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Tester_getArp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getArp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Tester_getArpPtr
newCallback_Tester_getArp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getArp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Tester_getArpPtr
newCallback_Tester_getArp(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getArp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Tester_getRoutingTable : public Callback_Tester_getRoutingTable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Tester_getRoutingTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getRoutingTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Tester_getRoutingTablePtr
newCallback_Tester_getRoutingTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getRoutingTable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Tester_getRoutingTablePtr
newCallback_Tester_getRoutingTable(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getRoutingTable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Tester_getRoutingTable : public Callback_Tester_getRoutingTable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Tester_getRoutingTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getRoutingTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Tester_getRoutingTablePtr
newCallback_Tester_getRoutingTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getRoutingTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Tester_getRoutingTablePtr
newCallback_Tester_getRoutingTable(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getRoutingTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Tester_getNatTable : public Callback_Tester_getNatTable_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Tester_getNatTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getNatTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Tester_getNatTablePtr
newCallback_Tester_getNatTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getNatTable<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Tester_getNatTablePtr
newCallback_Tester_getNatTable(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Tester_getNatTable<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Tester_getNatTable : public Callback_Tester_getNatTable_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Tester_getNatTable(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::pox::TesterPrx __proxy = ::pox::TesterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getNatTable(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Tester_getNatTablePtr
newCallback_Tester_getNatTable(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getNatTable<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Tester_getNatTablePtr
newCallback_Tester_getNatTable(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Tester_getNatTable<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
