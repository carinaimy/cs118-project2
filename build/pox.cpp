// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `pox.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <pox.hpp>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __pox__PacketInjector__sendPacket_name = "sendPacket";

const ::std::string __pox__PacketInjector__addPacketHandler_name = "addPacketHandler";

const ::std::string __pox__PacketInjector__getIfaces_name = "getIfaces";

const ::std::string __pox__PacketHandler__handlePacket_name = "handlePacket";

const ::std::string __pox__PacketHandler__resetRouter_name = "resetRouter";

const ::std::string __pox__Tester__getArp_name = "getArp";

const ::std::string __pox__Tester__getRoutingTable_name = "getRoutingTable";

const ::std::string __pox__Tester__getNatTable_name = "getNatTable";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::pox::upCast(::IceProxy::pox::PacketInjector* p) { return p; }

void
::IceProxy::pox::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketInjector>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::pox::PacketInjector;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::pox::PacketInjector::sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__PacketInjector__sendPacket_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::PacketInjector* __del = dynamic_cast< ::IceDelegate::pox::PacketInjector*>(__delBase.get());
            __del->sendPacket(packet, outIface, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::PacketInjector::begin_sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__PacketInjector__sendPacket_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__PacketInjector__sendPacket_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(packet);
        __os->write(outIface);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::pox::PacketInjector::end_sendPacket(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __pox__PacketInjector__sendPacket_name);
}

void
IceProxy::pox::PacketInjector::addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__PacketInjector__addPacketHandler_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::PacketInjector* __del = dynamic_cast< ::IceDelegate::pox::PacketInjector*>(__delBase.get());
            __del->addPacketHandler(identity, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::PacketInjector::begin_addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__PacketInjector__addPacketHandler_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__PacketInjector__addPacketHandler_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(identity);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::pox::PacketInjector::end_addPacketHandler(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __pox__PacketInjector__addPacketHandler_name);
}

::pox::Ifaces
IceProxy::pox::PacketInjector::getIfaces(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__PacketInjector__getIfaces_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pox__PacketInjector__getIfaces_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::PacketInjector* __del = dynamic_cast< ::IceDelegate::pox::PacketInjector*>(__delBase.get());
            return __del->getIfaces(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::PacketInjector::begin_getIfaces(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pox__PacketInjector__getIfaces_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__PacketInjector__getIfaces_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__PacketInjector__getIfaces_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::pox::Ifaces
IceProxy::pox::PacketInjector::end_getIfaces(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pox__PacketInjector__getIfaces_name);
    ::pox::Ifaces __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::pox::PacketInjector::ice_staticId()
{
    return ::pox::PacketInjector::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::pox::PacketInjector::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::pox::PacketInjector);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::pox::PacketInjector::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::pox::PacketInjector);
}

::IceProxy::Ice::Object*
IceProxy::pox::PacketInjector::__newInstance() const
{
    return new PacketInjector;
}
::IceProxy::Ice::Object* ::IceProxy::pox::upCast(::IceProxy::pox::PacketHandler* p) { return p; }

void
::IceProxy::pox::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::pox::PacketHandler>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::pox::PacketHandler;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::pox::PacketHandler::handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__PacketHandler__handlePacket_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::PacketHandler* __del = dynamic_cast< ::IceDelegate::pox::PacketHandler*>(__delBase.get());
            __del->handlePacket(packet, inIface, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::PacketHandler::begin_handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__PacketHandler__handlePacket_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__PacketHandler__handlePacket_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(packet);
        __os->write(inIface);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::pox::PacketHandler::end_handlePacket(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __pox__PacketHandler__handlePacket_name);
}

void
IceProxy::pox::PacketHandler::resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__PacketHandler__resetRouter_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::PacketHandler* __del = dynamic_cast< ::IceDelegate::pox::PacketHandler*>(__delBase.get());
            __del->resetRouter(ports, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::PacketHandler::begin_resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__PacketHandler__resetRouter_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__PacketHandler__resetRouter_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ports);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::pox::PacketHandler::end_resetRouter(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __pox__PacketHandler__resetRouter_name);
}

const ::std::string&
IceProxy::pox::PacketHandler::ice_staticId()
{
    return ::pox::PacketHandler::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::pox::PacketHandler::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::pox::PacketHandler);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::pox::PacketHandler::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::pox::PacketHandler);
}

::IceProxy::Ice::Object*
IceProxy::pox::PacketHandler::__newInstance() const
{
    return new PacketHandler;
}
::IceProxy::Ice::Object* ::IceProxy::pox::upCast(::IceProxy::pox::Tester* p) { return p; }

void
::IceProxy::pox::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::pox::Tester>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::pox::Tester;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::pox::Tester::getArp(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__Tester__getArp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pox__Tester__getArp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::Tester* __del = dynamic_cast< ::IceDelegate::pox::Tester*>(__delBase.get());
            return __del->getArp(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::Tester::begin_getArp(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pox__Tester__getArp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__Tester__getArp_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__Tester__getArp_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pox::Tester::end_getArp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pox__Tester__getArp_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::pox::Tester::getRoutingTable(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__Tester__getRoutingTable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pox__Tester__getRoutingTable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::Tester* __del = dynamic_cast< ::IceDelegate::pox::Tester*>(__delBase.get());
            return __del->getRoutingTable(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::Tester::begin_getRoutingTable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pox__Tester__getRoutingTable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__Tester__getRoutingTable_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__Tester__getRoutingTable_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pox::Tester::end_getRoutingTable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pox__Tester__getRoutingTable_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::pox::Tester::getNatTable(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __pox__Tester__getNatTable_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__pox__Tester__getNatTable_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::pox::Tester* __del = dynamic_cast< ::IceDelegate::pox::Tester*>(__delBase.get());
            return __del->getNatTable(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::pox::Tester::begin_getNatTable(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__pox__Tester__getNatTable_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __pox__Tester__getNatTable_name, __del, __cookie);
    try
    {
        __result->__prepare(__pox__Tester__getNatTable_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::pox::Tester::end_getNatTable(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __pox__Tester__getNatTable_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::pox::Tester::ice_staticId()
{
    return ::pox::Tester::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::pox::Tester::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::pox::Tester);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::pox::Tester::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::pox::Tester);
}

::IceProxy::Ice::Object*
IceProxy::pox::Tester::__newInstance() const
{
    return new Tester;
}

void
IceDelegateM::pox::PacketInjector::sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__PacketInjector__sendPacket_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(packet);
        __os->write(outIface);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::pox::PacketInjector::addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__PacketInjector__addPacketHandler_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(identity);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::pox::Ifaces
IceDelegateM::pox::PacketInjector::getIfaces(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__PacketInjector__getIfaces_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::pox::Ifaces __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::pox::PacketHandler::handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__PacketHandler__handlePacket_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(packet);
        __os->write(inIface);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::pox::PacketHandler::resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__PacketHandler__resetRouter_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ports);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::std::string
IceDelegateM::pox::Tester::getArp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__Tester__getArp_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pox::Tester::getRoutingTable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__Tester__getRoutingTable_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::pox::Tester::getNatTable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __pox__Tester__getNatTable_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::pox::PacketInjector::sendPacket(const ::pox::Buffer& packet, const ::std::string& outIface, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::pox::Buffer& __p_packet, const ::std::string& __p_outIface, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_packet(__p_packet),
            _m_outIface(__p_outIface)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::PacketInjector* servant = dynamic_cast< ::pox::PacketInjector*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->sendPacket(_m_packet, _m_outIface, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::pox::Buffer& _m_packet;
        const ::std::string& _m_outIface;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__PacketInjector__sendPacket_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(packet, outIface, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::pox::PacketInjector::addPacketHandler(const ::Ice::Identity& identity, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Identity& __p_identity, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_identity(__p_identity)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::PacketInjector* servant = dynamic_cast< ::pox::PacketInjector*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addPacketHandler(_m_identity, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::Identity& _m_identity;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__PacketInjector__addPacketHandler_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(identity, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::pox::Ifaces
IceDelegateD::pox::PacketInjector::getIfaces(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::pox::Ifaces& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::PacketInjector* servant = dynamic_cast< ::pox::PacketInjector*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getIfaces(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::pox::Ifaces& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__PacketInjector__getIfaces_name, ::Ice::Normal, __context);
    ::pox::Ifaces __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::pox::PacketHandler::handlePacket(const ::pox::Buffer& packet, const ::std::string& inIface, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::pox::Buffer& __p_packet, const ::std::string& __p_inIface, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_packet(__p_packet),
            _m_inIface(__p_inIface)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::PacketHandler* servant = dynamic_cast< ::pox::PacketHandler*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->handlePacket(_m_packet, _m_inIface, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::pox::Buffer& _m_packet;
        const ::std::string& _m_inIface;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__PacketHandler__handlePacket_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(packet, inIface, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::pox::PacketHandler::resetRouter(const ::pox::Ifaces& ports, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::pox::Ifaces& __p_ports, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ports(__p_ports)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::PacketHandler* servant = dynamic_cast< ::pox::PacketHandler*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->resetRouter(_m_ports, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::pox::Ifaces& _m_ports;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__PacketHandler__resetRouter_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ports, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::pox::Tester::getArp(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::Tester* servant = dynamic_cast< ::pox::Tester*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getArp(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__Tester__getArp_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::pox::Tester::getRoutingTable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::Tester* servant = dynamic_cast< ::pox::Tester*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getRoutingTable(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__Tester__getRoutingTable_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::pox::Tester::getNatTable(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::pox::Tester* servant = dynamic_cast< ::pox::Tester*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getNatTable(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __pox__Tester__getNatTable_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* pox::upCast(::pox::PacketInjector* p) { return p; }

namespace
{
const ::std::string __pox__PacketInjector_ids[2] =
{
    "::Ice::Object",
    "::pox::PacketInjector"
};

}

bool
pox::PacketInjector::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__pox__PacketInjector_ids, __pox__PacketInjector_ids + 2, _s);
}

::std::vector< ::std::string>
pox::PacketInjector::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__pox__PacketInjector_ids[0], &__pox__PacketInjector_ids[2]);
}

const ::std::string&
pox::PacketInjector::ice_id(const ::Ice::Current&) const
{
    return __pox__PacketInjector_ids[1];
}

const ::std::string&
pox::PacketInjector::ice_staticId()
{
    return __pox__PacketInjector_ids[1];
}

::Ice::DispatchStatus
pox::PacketInjector::___sendPacket(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::pox::Buffer packet;
    ::std::string outIface;
    __is->read(packet);
    __is->read(outIface);
    __inS.endReadParams();
    sendPacket(packet, outIface, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
pox::PacketInjector::___addPacketHandler(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity identity;
    __is->read(identity);
    __inS.endReadParams();
    addPacketHandler(identity, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
pox::PacketInjector::___getIfaces(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::pox::Ifaces __ret = getIfaces(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __pox__PacketInjector_all[] =
{
    "addPacketHandler",
    "getIfaces",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendPacket"
};

}

::Ice::DispatchStatus
pox::PacketInjector::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__pox__PacketInjector_all, __pox__PacketInjector_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __pox__PacketInjector_all)
    {
        case 0:
        {
            return ___addPacketHandler(in, current);
        }
        case 1:
        {
            return ___getIfaces(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___sendPacket(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
pox::PacketInjector::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
pox::PacketInjector::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
pox::__patch(PacketInjectorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::pox::PacketInjectorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::pox::PacketInjector::ice_staticId(), v);
    }
}

::Ice::Object* pox::upCast(::pox::PacketHandler* p) { return p; }

namespace
{
const ::std::string __pox__PacketHandler_ids[2] =
{
    "::Ice::Object",
    "::pox::PacketHandler"
};

}

bool
pox::PacketHandler::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__pox__PacketHandler_ids, __pox__PacketHandler_ids + 2, _s);
}

::std::vector< ::std::string>
pox::PacketHandler::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__pox__PacketHandler_ids[0], &__pox__PacketHandler_ids[2]);
}

const ::std::string&
pox::PacketHandler::ice_id(const ::Ice::Current&) const
{
    return __pox__PacketHandler_ids[1];
}

const ::std::string&
pox::PacketHandler::ice_staticId()
{
    return __pox__PacketHandler_ids[1];
}

::Ice::DispatchStatus
pox::PacketHandler::___handlePacket(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::pox::Buffer packet;
    ::std::string inIface;
    __is->read(packet);
    __is->read(inIface);
    __inS.endReadParams();
    handlePacket(packet, inIface, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
pox::PacketHandler::___resetRouter(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::pox::Ifaces ports;
    __is->read(ports);
    __inS.endReadParams();
    resetRouter(ports, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __pox__PacketHandler_all[] =
{
    "handlePacket",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetRouter"
};

}

::Ice::DispatchStatus
pox::PacketHandler::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__pox__PacketHandler_all, __pox__PacketHandler_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __pox__PacketHandler_all)
    {
        case 0:
        {
            return ___handlePacket(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___resetRouter(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
pox::PacketHandler::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
pox::PacketHandler::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
pox::__patch(PacketHandlerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::pox::PacketHandlerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::pox::PacketHandler::ice_staticId(), v);
    }
}

::Ice::Object* pox::upCast(::pox::Tester* p) { return p; }

namespace
{
const ::std::string __pox__Tester_ids[2] =
{
    "::Ice::Object",
    "::pox::Tester"
};

}

bool
pox::Tester::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__pox__Tester_ids, __pox__Tester_ids + 2, _s);
}

::std::vector< ::std::string>
pox::Tester::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__pox__Tester_ids[0], &__pox__Tester_ids[2]);
}

const ::std::string&
pox::Tester::ice_id(const ::Ice::Current&) const
{
    return __pox__Tester_ids[1];
}

const ::std::string&
pox::Tester::ice_staticId()
{
    return __pox__Tester_ids[1];
}

::Ice::DispatchStatus
pox::Tester::___getArp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getArp(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
pox::Tester::___getRoutingTable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getRoutingTable(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
pox::Tester::___getNatTable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getNatTable(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __pox__Tester_all[] =
{
    "getArp",
    "getNatTable",
    "getRoutingTable",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
pox::Tester::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__pox__Tester_all, __pox__Tester_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __pox__Tester_all)
    {
        case 0:
        {
            return ___getArp(in, current);
        }
        case 1:
        {
            return ___getNatTable(in, current);
        }
        case 2:
        {
            return ___getRoutingTable(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
pox::Tester::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
pox::Tester::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
pox::__patch(TesterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::pox::TesterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::pox::Tester::ice_staticId(), v);
    }
}
